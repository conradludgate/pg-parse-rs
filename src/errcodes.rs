/* autogenerated from src/backend/utils/errcodes.txt, do not edit */
/* there is deliberately not an #ifndef ERRCODES_H here */

const fn pgsixbit(b: u8) -> i32 {
    ((b - b'0') & 0x3f) as i32
}

const fn make_sqlstate(s: [u8; 5]) -> i32 {
    let [a, b, c, d, e] = s;
    pgsixbit(a) | pgsixbit(b) << 6 | pgsixbit(c) << 12 | pgsixbit(d) << 18 | pgsixbit(e) << 24
}

// #define PGSIXBIT(ch)	(((ch) - '0') & 0x3F)
// #define PGUNSIXBIT(val) (((val) & 0x3F) + '0')
// #define MAKE_SQLSTATE(ch1,ch2,ch3,ch4,ch5)	\
// 	(PGSIXBIT(ch1) + (PGSIXBIT(ch2) << 6) + (PGSIXBIT(ch3) << 12) + \
// 	 (PGSIXBIT(ch4) << 18) + (PGSIXBIT(ch5) << 24))

/* Class 00 - Successful Completion */
pub const ERRCODE_SUCCESSFUL_COMPLETION: i32 = make_sqlstate(*b"00000");

/* Class 01 - Warning */
pub const ERRCODE_WARNING: i32 = make_sqlstate(*b"01000");
pub const ERRCODE_WARNING_DYNAMIC_RESULT_SETS_RETURNED: i32 = make_sqlstate(*b"0100C");
pub const ERRCODE_WARNING_IMPLICIT_ZERO_BIT_PADDING: i32 = make_sqlstate(*b"01008");
pub const ERRCODE_WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION: i32 = make_sqlstate(*b"01003");
pub const ERRCODE_WARNING_PRIVILEGE_NOT_GRANTED: i32 = make_sqlstate(*b"01007");
pub const ERRCODE_WARNING_PRIVILEGE_NOT_REVOKED: i32 = make_sqlstate(*b"01006");
pub const ERRCODE_WARNING_STRING_DATA_RIGHT_TRUNCATION: i32 = make_sqlstate(*b"01004");
pub const ERRCODE_WARNING_DEPRECATED_FEATURE: i32 = make_sqlstate(*b"01P01");

/* Class 02 - No Data (this is also a warning class per the SQL standard) */
pub const ERRCODE_NO_DATA: i32 = make_sqlstate(*b"02000");
pub const ERRCODE_NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED: i32 = make_sqlstate(*b"02001");

/* Class 03 - SQL Statement Not Yet Complete */
pub const ERRCODE_SQL_STATEMENT_NOT_YET_COMPLETE: i32 = make_sqlstate(*b"03000");

/* Class 08 - Connection Exception */
pub const ERRCODE_CONNECTION_EXCEPTION: i32 = make_sqlstate(*b"08000");
pub const ERRCODE_CONNECTION_DOES_NOT_EXIST: i32 = make_sqlstate(*b"08003");
pub const ERRCODE_CONNECTION_FAILURE: i32 = make_sqlstate(*b"08006");
pub const ERRCODE_SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION: i32 = make_sqlstate(*b"08001");
pub const ERRCODE_SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION: i32 = make_sqlstate(*b"08004");
pub const ERRCODE_TRANSACTION_RESOLUTION_UNKNOWN: i32 = make_sqlstate(*b"08007");
pub const ERRCODE_PROTOCOL_VIOLATION: i32 = make_sqlstate(*b"08P01");

/* Class 09 - Triggered Action Exception */
pub const ERRCODE_TRIGGERED_ACTION_EXCEPTION: i32 = make_sqlstate(*b"09000");

/* Class 0A - Feature Not Supported */
pub const ERRCODE_FEATURE_NOT_SUPPORTED: i32 = make_sqlstate(*b"0A000");

/* Class 0B - Invalid Transaction Initiation */
pub const ERRCODE_INVALID_TRANSACTION_INITIATION: i32 = make_sqlstate(*b"0B000");

/* Class 0F - Locator Exception */
pub const ERRCODE_LOCATOR_EXCEPTION: i32 = make_sqlstate(*b"0F000");
pub const ERRCODE_L_E_INVALID_SPECIFICATION: i32 = make_sqlstate(*b"0F001");

/* Class 0L - Invalid Grantor */
pub const ERRCODE_INVALID_GRANTOR: i32 = make_sqlstate(*b"0L000");
pub const ERRCODE_INVALID_GRANT_OPERATION: i32 = make_sqlstate(*b"0LP01");

/* Class 0P - Invalid Role Specification */
pub const ERRCODE_INVALID_ROLE_SPECIFICATION: i32 = make_sqlstate(*b"0P000");

/* Class 0Z - Diagnostics Exception */
pub const ERRCODE_DIAGNOSTICS_EXCEPTION: i32 = make_sqlstate(*b"0Z000");
pub const ERRCODE_STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER: i32 =
    make_sqlstate(*b"0Z002");

/* Class 20 - Case Not Found */
pub const ERRCODE_CASE_NOT_FOUND: i32 = make_sqlstate(*b"20000");

/* Class 21 - Cardinality Violation */
pub const ERRCODE_CARDINALITY_VIOLATION: i32 = make_sqlstate(*b"21000");

/* Class 22 - Data Exception */
pub const ERRCODE_DATA_EXCEPTION: i32 = make_sqlstate(*b"22000");
pub const ERRCODE_ARRAY_ELEMENT_ERROR: i32 = make_sqlstate(*b"2202E");
pub const ERRCODE_ARRAY_SUBSCRIPT_ERROR: i32 = make_sqlstate(*b"2202E");
pub const ERRCODE_CHARACTER_NOT_IN_REPERTOIRE: i32 = make_sqlstate(*b"22021");
pub const ERRCODE_DATETIME_FIELD_OVERFLOW: i32 = make_sqlstate(*b"22008");
pub const ERRCODE_DATETIME_VALUE_OUT_OF_RANGE: i32 = make_sqlstate(*b"22008");
pub const ERRCODE_DIVISION_BY_ZERO: i32 = make_sqlstate(*b"22012");
pub const ERRCODE_ERROR_IN_ASSIGNMENT: i32 = make_sqlstate(*b"22005");
pub const ERRCODE_ESCAPE_CHARACTER_CONFLICT: i32 = make_sqlstate(*b"2200B");
pub const ERRCODE_INDICATOR_OVERFLOW: i32 = make_sqlstate(*b"22022");
pub const ERRCODE_INTERVAL_FIELD_OVERFLOW: i32 = make_sqlstate(*b"22015");
pub const ERRCODE_INVALID_ARGUMENT_FOR_LOG: i32 = make_sqlstate(*b"2201E");
pub const ERRCODE_INVALID_ARGUMENT_FOR_NTILE: i32 = make_sqlstate(*b"22014");
pub const ERRCODE_INVALID_ARGUMENT_FOR_NTH_VALUE: i32 = make_sqlstate(*b"22016");
pub const ERRCODE_INVALID_ARGUMENT_FOR_POWER_FUNCTION: i32 = make_sqlstate(*b"2201F");
pub const ERRCODE_INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION: i32 = make_sqlstate(*b"2201G");
pub const ERRCODE_INVALID_CHARACTER_VALUE_FOR_CAST: i32 = make_sqlstate(*b"22018");
pub const ERRCODE_INVALID_DATETIME_FORMAT: i32 = make_sqlstate(*b"22007");
pub const ERRCODE_INVALID_ESCAPE_CHARACTER: i32 = make_sqlstate(*b"22019");
pub const ERRCODE_INVALID_ESCAPE_OCTET: i32 = make_sqlstate(*b"2200D");
pub const ERRCODE_INVALID_ESCAPE_SEQUENCE: i32 = make_sqlstate(*b"22025");
pub const ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER: i32 = make_sqlstate(*b"22P06");
pub const ERRCODE_INVALID_INDICATOR_PARAMETER_VALUE: i32 = make_sqlstate(*b"22010");
pub const ERRCODE_INVALID_PARAMETER_VALUE: i32 = make_sqlstate(*b"22023");
pub const ERRCODE_INVALID_PRECEDING_OR_FOLLOWING_SIZE: i32 = make_sqlstate(*b"22013");
pub const ERRCODE_INVALID_REGULAR_EXPRESSION: i32 = make_sqlstate(*b"2201B");
pub const ERRCODE_INVALID_ROW_COUNT_IN_LIMIT_CLAUSE: i32 = make_sqlstate(*b"2201W");
pub const ERRCODE_INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE: i32 = make_sqlstate(*b"2201X");
pub const ERRCODE_INVALID_TABLESAMPLE_ARGUMENT: i32 = make_sqlstate(*b"2202H");
pub const ERRCODE_INVALID_TABLESAMPLE_REPEAT: i32 = make_sqlstate(*b"2202G");
pub const ERRCODE_INVALID_TIME_ZONE_DISPLACEMENT_VALUE: i32 = make_sqlstate(*b"22009");
pub const ERRCODE_INVALID_USE_OF_ESCAPE_CHARACTER: i32 = make_sqlstate(*b"2200C");
pub const ERRCODE_MOST_SPECIFIC_TYPE_MISMATCH: i32 = make_sqlstate(*b"2200G");
pub const ERRCODE_NULL_VALUE_NOT_ALLOWED: i32 = make_sqlstate(*b"22004");
pub const ERRCODE_NULL_VALUE_NO_INDICATOR_PARAMETER: i32 = make_sqlstate(*b"22002");
pub const ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE: i32 = make_sqlstate(*b"22003");
pub const ERRCODE_SEQUENCE_GENERATOR_LIMIT_EXCEEDED: i32 = make_sqlstate(*b"2200H");
pub const ERRCODE_STRING_DATA_LENGTH_MISMATCH: i32 = make_sqlstate(*b"22026");
pub const ERRCODE_STRING_DATA_RIGHT_TRUNCATION: i32 = make_sqlstate(*b"22001");
pub const ERRCODE_SUBSTRING_ERROR: i32 = make_sqlstate(*b"22011");
pub const ERRCODE_TRIM_ERROR: i32 = make_sqlstate(*b"22027");
pub const ERRCODE_UNTERMINATED_C_STRING: i32 = make_sqlstate(*b"22024");
pub const ERRCODE_ZERO_LENGTH_CHARACTER_STRING: i32 = make_sqlstate(*b"2200F");
pub const ERRCODE_FLOATING_POINT_EXCEPTION: i32 = make_sqlstate(*b"22P01");
pub const ERRCODE_INVALID_TEXT_REPRESENTATION: i32 = make_sqlstate(*b"22P02");
pub const ERRCODE_INVALID_BINARY_REPRESENTATION: i32 = make_sqlstate(*b"22P03");
pub const ERRCODE_BAD_COPY_FILE_FORMAT: i32 = make_sqlstate(*b"22P04");
pub const ERRCODE_UNTRANSLATABLE_CHARACTER: i32 = make_sqlstate(*b"22P05");
pub const ERRCODE_NOT_AN_XML_DOCUMENT: i32 = make_sqlstate(*b"2200L");
pub const ERRCODE_INVALID_XML_DOCUMENT: i32 = make_sqlstate(*b"2200M");
pub const ERRCODE_INVALID_XML_CONTENT: i32 = make_sqlstate(*b"2200N");
pub const ERRCODE_INVALID_XML_COMMENT: i32 = make_sqlstate(*b"2200S");
pub const ERRCODE_INVALID_XML_PROCESSING_INSTRUCTION: i32 = make_sqlstate(*b"2200T");
pub const ERRCODE_DUPLICATE_JSON_OBJECT_KEY_VALUE: i32 = make_sqlstate(*b"22030");
pub const ERRCODE_INVALID_ARGUMENT_FOR_SQL_JSON_DATETIME_FUNCTION: i32 = make_sqlstate(*b"22031");
pub const ERRCODE_INVALID_JSON_TEXT: i32 = make_sqlstate(*b"22032");
pub const ERRCODE_INVALID_SQL_JSON_SUBSCRIPT: i32 = make_sqlstate(*b"22033");
pub const ERRCODE_MORE_THAN_ONE_SQL_JSON_ITEM: i32 = make_sqlstate(*b"22034");
pub const ERRCODE_NO_SQL_JSON_ITEM: i32 = make_sqlstate(*b"22035");
pub const ERRCODE_NON_NUMERIC_SQL_JSON_ITEM: i32 = make_sqlstate(*b"22036");
pub const ERRCODE_NON_UNIQUE_KEYS_IN_A_JSON_OBJECT: i32 = make_sqlstate(*b"22037");
pub const ERRCODE_SINGLETON_SQL_JSON_ITEM_REQUIRED: i32 = make_sqlstate(*b"22038");
pub const ERRCODE_SQL_JSON_ARRAY_NOT_FOUND: i32 = make_sqlstate(*b"22039");
pub const ERRCODE_SQL_JSON_MEMBER_NOT_FOUND: i32 = make_sqlstate(*b"2203A");
pub const ERRCODE_SQL_JSON_NUMBER_NOT_FOUND: i32 = make_sqlstate(*b"2203B");
pub const ERRCODE_SQL_JSON_OBJECT_NOT_FOUND: i32 = make_sqlstate(*b"2203C");
pub const ERRCODE_TOO_MANY_JSON_ARRAY_ELEMENTS: i32 = make_sqlstate(*b"2203D");
pub const ERRCODE_TOO_MANY_JSON_OBJECT_MEMBERS: i32 = make_sqlstate(*b"2203E");
pub const ERRCODE_SQL_JSON_SCALAR_REQUIRED: i32 = make_sqlstate(*b"2203F");

/* Class 23 - Integrity Constraint Violation */
pub const ERRCODE_INTEGRITY_CONSTRAINT_VIOLATION: i32 = make_sqlstate(*b"23000");
pub const ERRCODE_RESTRICT_VIOLATION: i32 = make_sqlstate(*b"23001");
pub const ERRCODE_NOT_NULL_VIOLATION: i32 = make_sqlstate(*b"23502");
pub const ERRCODE_FOREIGN_KEY_VIOLATION: i32 = make_sqlstate(*b"23503");
pub const ERRCODE_UNIQUE_VIOLATION: i32 = make_sqlstate(*b"23505");
pub const ERRCODE_CHECK_VIOLATION: i32 = make_sqlstate(*b"23514");
pub const ERRCODE_EXCLUSION_VIOLATION: i32 = make_sqlstate(*b"23P01");

/* Class 24 - Invalid Cursor State */
pub const ERRCODE_INVALID_CURSOR_STATE: i32 = make_sqlstate(*b"24000");

/* Class 25 - Invalid Transaction State */
pub const ERRCODE_INVALID_TRANSACTION_STATE: i32 = make_sqlstate(*b"25000");
pub const ERRCODE_ACTIVE_SQL_TRANSACTION: i32 = make_sqlstate(*b"25001");
pub const ERRCODE_BRANCH_TRANSACTION_ALREADY_ACTIVE: i32 = make_sqlstate(*b"25002");
pub const ERRCODE_HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL: i32 = make_sqlstate(*b"25008");
pub const ERRCODE_INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION: i32 = make_sqlstate(*b"25003");
pub const ERRCODE_INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION: i32 =
    make_sqlstate(*b"25004");
pub const ERRCODE_NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION: i32 = make_sqlstate(*b"25005");
pub const ERRCODE_READ_ONLY_SQL_TRANSACTION: i32 = make_sqlstate(*b"25006");
pub const ERRCODE_SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED: i32 = make_sqlstate(*b"25007");
pub const ERRCODE_NO_ACTIVE_SQL_TRANSACTION: i32 = make_sqlstate(*b"25P01");
pub const ERRCODE_IN_FAILED_SQL_TRANSACTION: i32 = make_sqlstate(*b"25P02");
pub const ERRCODE_IDLE_IN_TRANSACTION_SESSION_TIMEOUT: i32 = make_sqlstate(*b"25P03");

/* Class 26 - Invalid SQL Statement Name */
pub const ERRCODE_INVALID_SQL_STATEMENT_NAME: i32 = make_sqlstate(*b"26000");

/* Class 27 - Triggered Data Change Violation */
pub const ERRCODE_TRIGGERED_DATA_CHANGE_VIOLATION: i32 = make_sqlstate(*b"27000");

/* Class 28 - Invalid Authorization Specification */
pub const ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION: i32 = make_sqlstate(*b"28000");
pub const ERRCODE_INVALID_PASSWORD: i32 = make_sqlstate(*b"28P01");

/* Class 2B - Dependent Privilege Descriptors Still Exist */
pub const ERRCODE_DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST: i32 = make_sqlstate(*b"2B000");
pub const ERRCODE_DEPENDENT_OBJECTS_STILL_EXIST: i32 = make_sqlstate(*b"2BP01");

/* Class 2D - Invalid Transaction Termination */
pub const ERRCODE_INVALID_TRANSACTION_TERMINATION: i32 = make_sqlstate(*b"2D000");

/* Class 2F - SQL Routine Exception */
pub const ERRCODE_SQL_ROUTINE_EXCEPTION: i32 = make_sqlstate(*b"2F000");
pub const ERRCODE_S_R_E_FUNCTION_EXECUTED_NO_RETURN_STATEMENT: i32 = make_sqlstate(*b"2F005");
pub const ERRCODE_S_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED: i32 = make_sqlstate(*b"2F002");
pub const ERRCODE_S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED: i32 = make_sqlstate(*b"2F003");
pub const ERRCODE_S_R_E_READING_SQL_DATA_NOT_PERMITTED: i32 = make_sqlstate(*b"2F004");

/* Class 34 - Invalid Cursor Name */
pub const ERRCODE_INVALID_CURSOR_NAME: i32 = make_sqlstate(*b"34000");

/* Class 38 - External Routine Exception */
pub const ERRCODE_EXTERNAL_ROUTINE_EXCEPTION: i32 = make_sqlstate(*b"38000");
pub const ERRCODE_E_R_E_CONTAINING_SQL_NOT_PERMITTED: i32 = make_sqlstate(*b"38001");
pub const ERRCODE_E_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED: i32 = make_sqlstate(*b"38002");
pub const ERRCODE_E_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED: i32 = make_sqlstate(*b"38003");
pub const ERRCODE_E_R_E_READING_SQL_DATA_NOT_PERMITTED: i32 = make_sqlstate(*b"38004");

/* Class 39 - External Routine Invocation Exception */
pub const ERRCODE_EXTERNAL_ROUTINE_INVOCATION_EXCEPTION: i32 = make_sqlstate(*b"39000");
pub const ERRCODE_E_R_I_E_INVALID_SQLSTATE_RETURNED: i32 = make_sqlstate(*b"39001");
pub const ERRCODE_E_R_I_E_NULL_VALUE_NOT_ALLOWED: i32 = make_sqlstate(*b"39004");
pub const ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED: i32 = make_sqlstate(*b"39P01");
pub const ERRCODE_E_R_I_E_SRF_PROTOCOL_VIOLATED: i32 = make_sqlstate(*b"39P02");
pub const ERRCODE_E_R_I_E_EVENT_TRIGGER_PROTOCOL_VIOLATED: i32 = make_sqlstate(*b"39P03");

/* Class 3B - Savepoint Exception */
pub const ERRCODE_SAVEPOINT_EXCEPTION: i32 = make_sqlstate(*b"3B000");
pub const ERRCODE_S_E_INVALID_SPECIFICATION: i32 = make_sqlstate(*b"3B001");

/* Class 3D - Invalid Catalog Name */
pub const ERRCODE_INVALID_CATALOG_NAME: i32 = make_sqlstate(*b"3D000");

/* Class 3F - Invalid Schema Name */
pub const ERRCODE_INVALID_SCHEMA_NAME: i32 = make_sqlstate(*b"3F000");

/* Class 40 - Transaction Rollback */
pub const ERRCODE_TRANSACTION_ROLLBACK: i32 = make_sqlstate(*b"40000");
pub const ERRCODE_T_R_INTEGRITY_CONSTRAINT_VIOLATION: i32 = make_sqlstate(*b"40002");
pub const ERRCODE_T_R_SERIALIZATION_FAILURE: i32 = make_sqlstate(*b"40001");
pub const ERRCODE_T_R_STATEMENT_COMPLETION_UNKNOWN: i32 = make_sqlstate(*b"40003");
pub const ERRCODE_T_R_DEADLOCK_DETECTED: i32 = make_sqlstate(*b"40P01");

/* Class 42 - Syntax Error or Access Rule Violation */
pub const ERRCODE_SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION: i32 = make_sqlstate(*b"42000");
pub const ERRCODE_SYNTAX_ERROR: i32 = make_sqlstate(*b"42601");
pub const ERRCODE_INSUFFICIENT_PRIVILEGE: i32 = make_sqlstate(*b"42501");
pub const ERRCODE_CANNOT_COERCE: i32 = make_sqlstate(*b"42846");
pub const ERRCODE_GROUPING_ERROR: i32 = make_sqlstate(*b"42803");
pub const ERRCODE_WINDOWING_ERROR: i32 = make_sqlstate(*b"42P20");
pub const ERRCODE_INVALID_RECURSION: i32 = make_sqlstate(*b"42P19");
pub const ERRCODE_INVALID_FOREIGN_KEY: i32 = make_sqlstate(*b"42830");
pub const ERRCODE_INVALID_NAME: i32 = make_sqlstate(*b"42602");
pub const ERRCODE_NAME_TOO_LONG: i32 = make_sqlstate(*b"42622");
pub const ERRCODE_RESERVED_NAME: i32 = make_sqlstate(*b"42939");
pub const ERRCODE_DATATYPE_MISMATCH: i32 = make_sqlstate(*b"42804");
pub const ERRCODE_INDETERMINATE_DATATYPE: i32 = make_sqlstate(*b"42P18");
pub const ERRCODE_COLLATION_MISMATCH: i32 = make_sqlstate(*b"42P21");
pub const ERRCODE_INDETERMINATE_COLLATION: i32 = make_sqlstate(*b"42P22");
pub const ERRCODE_WRONG_OBJECT_TYPE: i32 = make_sqlstate(*b"42809");
pub const ERRCODE_GENERATED_ALWAYS: i32 = make_sqlstate(*b"428C9");
pub const ERRCODE_UNDEFINED_COLUMN: i32 = make_sqlstate(*b"42703");
pub const ERRCODE_UNDEFINED_CURSOR: i32 = make_sqlstate(*b"34000");
pub const ERRCODE_UNDEFINED_DATABASE: i32 = make_sqlstate(*b"3D000");
pub const ERRCODE_UNDEFINED_FUNCTION: i32 = make_sqlstate(*b"42883");
pub const ERRCODE_UNDEFINED_PSTATEMENT: i32 = make_sqlstate(*b"26000");
pub const ERRCODE_UNDEFINED_SCHEMA: i32 = make_sqlstate(*b"3F000");
pub const ERRCODE_UNDEFINED_TABLE: i32 = make_sqlstate(*b"42P01");
pub const ERRCODE_UNDEFINED_PARAMETER: i32 = make_sqlstate(*b"42P02");
pub const ERRCODE_UNDEFINED_OBJECT: i32 = make_sqlstate(*b"42704");
pub const ERRCODE_DUPLICATE_COLUMN: i32 = make_sqlstate(*b"42701");
pub const ERRCODE_DUPLICATE_CURSOR: i32 = make_sqlstate(*b"42P03");
pub const ERRCODE_DUPLICATE_DATABASE: i32 = make_sqlstate(*b"42P04");
pub const ERRCODE_DUPLICATE_FUNCTION: i32 = make_sqlstate(*b"42723");
pub const ERRCODE_DUPLICATE_PSTATEMENT: i32 = make_sqlstate(*b"42P05");
pub const ERRCODE_DUPLICATE_SCHEMA: i32 = make_sqlstate(*b"42P06");
pub const ERRCODE_DUPLICATE_TABLE: i32 = make_sqlstate(*b"42P07");
pub const ERRCODE_DUPLICATE_ALIAS: i32 = make_sqlstate(*b"42712");
pub const ERRCODE_DUPLICATE_OBJECT: i32 = make_sqlstate(*b"42710");
pub const ERRCODE_AMBIGUOUS_COLUMN: i32 = make_sqlstate(*b"42702");
pub const ERRCODE_AMBIGUOUS_FUNCTION: i32 = make_sqlstate(*b"42725");
pub const ERRCODE_AMBIGUOUS_PARAMETER: i32 = make_sqlstate(*b"42P08");
pub const ERRCODE_AMBIGUOUS_ALIAS: i32 = make_sqlstate(*b"42P09");
pub const ERRCODE_INVALID_COLUMN_REFERENCE: i32 = make_sqlstate(*b"42P10");
pub const ERRCODE_INVALID_COLUMN_DEFINITION: i32 = make_sqlstate(*b"42611");
pub const ERRCODE_INVALID_CURSOR_DEFINITION: i32 = make_sqlstate(*b"42P11");
pub const ERRCODE_INVALID_DATABASE_DEFINITION: i32 = make_sqlstate(*b"42P12");
pub const ERRCODE_INVALID_FUNCTION_DEFINITION: i32 = make_sqlstate(*b"42P13");
pub const ERRCODE_INVALID_PSTATEMENT_DEFINITION: i32 = make_sqlstate(*b"42P14");
pub const ERRCODE_INVALID_SCHEMA_DEFINITION: i32 = make_sqlstate(*b"42P15");
pub const ERRCODE_INVALID_TABLE_DEFINITION: i32 = make_sqlstate(*b"42P16");
pub const ERRCODE_INVALID_OBJECT_DEFINITION: i32 = make_sqlstate(*b"42P17");

/* Class 44 - WITH CHECK OPTION Violation */
pub const ERRCODE_WITH_CHECK_OPTION_VIOLATION: i32 = make_sqlstate(*b"44000");

/* Class 53 - Insufficient Resources */
pub const ERRCODE_INSUFFICIENT_RESOURCES: i32 = make_sqlstate(*b"53000");
pub const ERRCODE_DISK_FULL: i32 = make_sqlstate(*b"53100");
pub const ERRCODE_OUT_OF_MEMORY: i32 = make_sqlstate(*b"53200");
pub const ERRCODE_TOO_MANY_CONNECTIONS: i32 = make_sqlstate(*b"53300");
pub const ERRCODE_CONFIGURATION_LIMIT_EXCEEDED: i32 = make_sqlstate(*b"53400");

/* Class 54 - Program Limit Exceeded */
pub const ERRCODE_PROGRAM_LIMIT_EXCEEDED: i32 = make_sqlstate(*b"54000");
pub const ERRCODE_STATEMENT_TOO_COMPLEX: i32 = make_sqlstate(*b"54001");
pub const ERRCODE_TOO_MANY_COLUMNS: i32 = make_sqlstate(*b"54011");
pub const ERRCODE_TOO_MANY_ARGUMENTS: i32 = make_sqlstate(*b"54023");

/* Class 55 - Object Not In Prerequisite State */
pub const ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE: i32 = make_sqlstate(*b"55000");
pub const ERRCODE_OBJECT_IN_USE: i32 = make_sqlstate(*b"55006");
pub const ERRCODE_CANT_CHANGE_RUNTIME_PARAM: i32 = make_sqlstate(*b"55P02");
pub const ERRCODE_LOCK_NOT_AVAILABLE: i32 = make_sqlstate(*b"55P03");
pub const ERRCODE_UNSAFE_NEW_ENUM_VALUE_USAGE: i32 = make_sqlstate(*b"55P04");

/* Class 57 - Operator Intervention */
pub const ERRCODE_OPERATOR_INTERVENTION: i32 = make_sqlstate(*b"57000");
pub const ERRCODE_QUERY_CANCELED: i32 = make_sqlstate(*b"57014");
pub const ERRCODE_ADMIN_SHUTDOWN: i32 = make_sqlstate(*b"57P01");
pub const ERRCODE_CRASH_SHUTDOWN: i32 = make_sqlstate(*b"57P02");
pub const ERRCODE_CANNOT_CONNECT_NOW: i32 = make_sqlstate(*b"57P03");
pub const ERRCODE_DATABASE_DROPPED: i32 = make_sqlstate(*b"57P04");
pub const ERRCODE_IDLE_SESSION_TIMEOUT: i32 = make_sqlstate(*b"57P05");

/* Class 58 - System Error (errors external to PostgreSQL itself) */
pub const ERRCODE_SYSTEM_ERROR: i32 = make_sqlstate(*b"58000");
pub const ERRCODE_IO_ERROR: i32 = make_sqlstate(*b"58030");
pub const ERRCODE_UNDEFINED_FILE: i32 = make_sqlstate(*b"58P01");
pub const ERRCODE_DUPLICATE_FILE: i32 = make_sqlstate(*b"58P02");

/* Class 72 - Snapshot Failure */
pub const ERRCODE_SNAPSHOT_TOO_OLD: i32 = make_sqlstate(*b"72000");

/* Class F0 - Configuration File Error */
pub const ERRCODE_CONFIG_FILE_ERROR: i32 = make_sqlstate(*b"F0000");
pub const ERRCODE_LOCK_FILE_EXISTS: i32 = make_sqlstate(*b"F0001");

/* Class HV - Foreign Data Wrapper Error (SQL/MED) */
pub const ERRCODE_FDW_ERROR: i32 = make_sqlstate(*b"HV000");
pub const ERRCODE_FDW_COLUMN_NAME_NOT_FOUND: i32 = make_sqlstate(*b"HV005");
pub const ERRCODE_FDW_DYNAMIC_PARAMETER_VALUE_NEEDED: i32 = make_sqlstate(*b"HV002");
pub const ERRCODE_FDW_FUNCTION_SEQUENCE_ERROR: i32 = make_sqlstate(*b"HV010");
pub const ERRCODE_FDW_INCONSISTENT_DESCRIPTOR_INFORMATION: i32 = make_sqlstate(*b"HV021");
pub const ERRCODE_FDW_INVALID_ATTRIBUTE_VALUE: i32 = make_sqlstate(*b"HV024");
pub const ERRCODE_FDW_INVALID_COLUMN_NAME: i32 = make_sqlstate(*b"HV007");
pub const ERRCODE_FDW_INVALID_COLUMN_NUMBER: i32 = make_sqlstate(*b"HV008");
pub const ERRCODE_FDW_INVALID_DATA_TYPE: i32 = make_sqlstate(*b"HV004");
pub const ERRCODE_FDW_INVALID_DATA_TYPE_DESCRIPTORS: i32 = make_sqlstate(*b"HV006");
pub const ERRCODE_FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER: i32 = make_sqlstate(*b"HV091");
pub const ERRCODE_FDW_INVALID_HANDLE: i32 = make_sqlstate(*b"HV00B");
pub const ERRCODE_FDW_INVALID_OPTION_INDEX: i32 = make_sqlstate(*b"HV00C");
pub const ERRCODE_FDW_INVALID_OPTION_NAME: i32 = make_sqlstate(*b"HV00D");
pub const ERRCODE_FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH: i32 = make_sqlstate(*b"HV090");
pub const ERRCODE_FDW_INVALID_STRING_FORMAT: i32 = make_sqlstate(*b"HV00A");
pub const ERRCODE_FDW_INVALID_USE_OF_NULL_POINTER: i32 = make_sqlstate(*b"HV009");
pub const ERRCODE_FDW_TOO_MANY_HANDLES: i32 = make_sqlstate(*b"HV014");
pub const ERRCODE_FDW_OUT_OF_MEMORY: i32 = make_sqlstate(*b"HV001");
pub const ERRCODE_FDW_NO_SCHEMAS: i32 = make_sqlstate(*b"HV00P");
pub const ERRCODE_FDW_OPTION_NAME_NOT_FOUND: i32 = make_sqlstate(*b"HV00J");
pub const ERRCODE_FDW_REPLY_HANDLE: i32 = make_sqlstate(*b"HV00K");
pub const ERRCODE_FDW_SCHEMA_NOT_FOUND: i32 = make_sqlstate(*b"HV00Q");
pub const ERRCODE_FDW_TABLE_NOT_FOUND: i32 = make_sqlstate(*b"HV00R");
pub const ERRCODE_FDW_UNABLE_TO_CREATE_EXECUTION: i32 = make_sqlstate(*b"HV00L");
pub const ERRCODE_FDW_UNABLE_TO_CREATE_REPLY: i32 = make_sqlstate(*b"HV00M");
pub const ERRCODE_FDW_UNABLE_TO_ESTABLISH_CONNECTION: i32 = make_sqlstate(*b"HV00N");

/* Class P0 - PL/pgSQL Error */
pub const ERRCODE_PLPGSQL_ERROR: i32 = make_sqlstate(*b"P0000");
pub const ERRCODE_RAISE_EXCEPTION: i32 = make_sqlstate(*b"P0001");
pub const ERRCODE_NO_DATA_FOUND: i32 = make_sqlstate(*b"P0002");
pub const ERRCODE_TOO_MANY_ROWS: i32 = make_sqlstate(*b"P0003");
pub const ERRCODE_ASSERT_FAILURE: i32 = make_sqlstate(*b"P0004");

/* Class XX - Internal Error */
pub const ERRCODE_INTERNAL_ERROR: i32 = make_sqlstate(*b"XX000");
pub const ERRCODE_DATA_CORRUPTED: i32 = make_sqlstate(*b"XX001");
pub const ERRCODE_INDEX_CORRUPTED: i32 = make_sqlstate(*b"XX002");
